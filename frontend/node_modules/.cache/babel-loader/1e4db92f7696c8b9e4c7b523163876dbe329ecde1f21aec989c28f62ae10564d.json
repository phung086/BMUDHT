{"ast":null,"code":"var _jsxFileName = \"D:\\\\BMUDHT\\\\frontend\\\\src\\\\context\\\\NotificationContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useCallback, useEffect, useMemo, useState } from \"react\";\nimport api from \"../services/api\";\nimport { getReferenceCode } from \"../utils/reference\";\nimport { decodeTokenPayload } from \"../utils/authSignal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext({\n  notifications: [],\n  unreadCount: 0,\n  refresh: () => Promise.resolve(),\n  markAllAsRead: () => {},\n  markAsRead: () => {}\n});\nconst STORAGE_KEY = \"notification.read\";\nconst loadReadState = () => {\n  try {\n    const raw = localStorage.getItem(STORAGE_KEY);\n    if (!raw) return {};\n    return JSON.parse(raw);\n  } catch (e) {\n    return {};\n  }\n};\nconst saveReadState = map => {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(map));\n  } catch (e) {}\n};\nconst buildNotificationFromTransaction = (tx, activeUserId) => {\n  const verb = tx.type === \"deposit\" ? \"Nạp\" : tx.type === \"transfer\" ? \"Chuyển\" : \"Giao dịch\";\n  const actor = tx.type === \"deposit\" ? \"vào tài khoản\" : tx.type === \"transfer\" ? `đến ${tx.toUsername}` : tx.description || \"\";\n  const title = tx.type === \"deposit\" ? \"Nạp tiền thành công\" : tx.type === \"transfer\" ? \"Chuyển khoản thành công\" : \"Giao dịch\";\n  const decoratedTx = {\n    ...tx,\n    reference: getReferenceCode(tx)\n  };\n  const baseAmount = Number(decoratedTx.amount || 0);\n  const isIncoming = decoratedTx.type === \"deposit\" || typeof activeUserId === \"number\" && decoratedTx.toUserId === activeUserId;\n  const signedAmount = isIncoming ? baseAmount : -baseAmount;\n  return {\n    id: String(tx.id),\n    title,\n    description: decoratedTx.description || `${verb} ${actor}`.trim(),\n    amount: signedAmount,\n    status: decoratedTx.status,\n    createdAt: decoratedTx.createdAt,\n    reference: decoratedTx.reference,\n    isIncoming,\n    raw: decoratedTx\n  };\n};\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [readMap, setReadMap] = useState(() => loadReadState());\n  const [loading, setLoading] = useState(false);\n  const fetchNotifications = useCallback(async () => {\n    setLoading(true);\n    try {\n      var _decodeTokenPayload, _res$data;\n      const res = await api.get(\"/api/transactions/history\");\n      const activeUserId = (_decodeTokenPayload = decodeTokenPayload()) === null || _decodeTokenPayload === void 0 ? void 0 : _decodeTokenPayload.id;\n      const items = (((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.transactions) || []).map(tx => buildNotificationFromTransaction(tx, activeUserId));\n      setNotifications(items.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)));\n      return items;\n    } catch (e) {\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchNotifications();\n  }, [fetchNotifications]);\n  useEffect(() => {\n    saveReadState(readMap);\n  }, [readMap]);\n  const markAllAsRead = useCallback(() => {\n    const next = notifications.reduce((acc, item) => {\n      acc[item.id] = true;\n      return acc;\n    }, {});\n    setReadMap(next);\n  }, [notifications]);\n  const markAsRead = useCallback(id => {\n    setReadMap(curr => ({\n      ...curr,\n      [id]: true\n    }));\n  }, []);\n  const refresh = useCallback(async () => {\n    const items = await fetchNotifications();\n    setNotifications(items);\n    return items;\n  }, [fetchNotifications]);\n  const value = useMemo(() => {\n    const unreadCount = notifications.reduce((count, item) => {\n      return readMap[item.id] ? count : count + 1;\n    }, 0);\n    return {\n      notifications,\n      unreadCount,\n      loading,\n      refresh,\n      markAllAsRead,\n      markAsRead,\n      readMap\n    };\n  }, [notifications, readMap, refresh, markAllAsRead, markAsRead, loading]);\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"yjoC9O/Hsf0JFAMX9C1eILcoCSI=\");\n_c = NotificationProvider;\nexport default NotificationContext;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useCallback","useEffect","useMemo","useState","api","getReferenceCode","decodeTokenPayload","jsxDEV","_jsxDEV","NotificationContext","notifications","unreadCount","refresh","Promise","resolve","markAllAsRead","markAsRead","STORAGE_KEY","loadReadState","raw","localStorage","getItem","JSON","parse","e","saveReadState","map","setItem","stringify","buildNotificationFromTransaction","tx","activeUserId","verb","type","actor","toUsername","description","title","decoratedTx","reference","baseAmount","Number","amount","isIncoming","toUserId","signedAmount","id","String","trim","status","createdAt","NotificationProvider","children","_s","setNotifications","readMap","setReadMap","loading","setLoading","fetchNotifications","_decodeTokenPayload","_res$data","res","get","items","data","transactions","sort","a","b","Date","next","reduce","acc","item","curr","value","count","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BMUDHT/frontend/src/context/NotificationContext.js"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport api from \"../services/api\";\r\nimport { getReferenceCode } from \"../utils/reference\";\r\nimport { decodeTokenPayload } from \"../utils/authSignal\";\r\n\r\nconst NotificationContext = createContext({\r\n  notifications: [],\r\n  unreadCount: 0,\r\n  refresh: () => Promise.resolve(),\r\n  markAllAsRead: () => {},\r\n  markAsRead: () => {},\r\n});\r\n\r\nconst STORAGE_KEY = \"notification.read\";\r\n\r\nconst loadReadState = () => {\r\n  try {\r\n    const raw = localStorage.getItem(STORAGE_KEY);\r\n    if (!raw) return {};\r\n    return JSON.parse(raw);\r\n  } catch (e) {\r\n    return {};\r\n  }\r\n};\r\n\r\nconst saveReadState = (map) => {\r\n  try {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(map));\r\n  } catch (e) {}\r\n};\r\n\r\nconst buildNotificationFromTransaction = (tx, activeUserId) => {\r\n  const verb =\r\n    tx.type === \"deposit\"\r\n      ? \"Nạp\"\r\n      : tx.type === \"transfer\"\r\n      ? \"Chuyển\"\r\n      : \"Giao dịch\";\r\n  const actor =\r\n    tx.type === \"deposit\"\r\n      ? \"vào tài khoản\"\r\n      : tx.type === \"transfer\"\r\n      ? `đến ${tx.toUsername}`\r\n      : tx.description || \"\";\r\n  const title =\r\n    tx.type === \"deposit\"\r\n      ? \"Nạp tiền thành công\"\r\n      : tx.type === \"transfer\"\r\n      ? \"Chuyển khoản thành công\"\r\n      : \"Giao dịch\";\r\n  const decoratedTx = { ...tx, reference: getReferenceCode(tx) };\r\n  const baseAmount = Number(decoratedTx.amount || 0);\r\n  const isIncoming =\r\n    decoratedTx.type === \"deposit\" ||\r\n    (typeof activeUserId === \"number\" && decoratedTx.toUserId === activeUserId);\r\n  const signedAmount = isIncoming ? baseAmount : -baseAmount;\r\n  return {\r\n    id: String(tx.id),\r\n    title,\r\n    description: decoratedTx.description || `${verb} ${actor}`.trim(),\r\n    amount: signedAmount,\r\n    status: decoratedTx.status,\r\n    createdAt: decoratedTx.createdAt,\r\n    reference: decoratedTx.reference,\r\n    isIncoming,\r\n    raw: decoratedTx,\r\n  };\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [readMap, setReadMap] = useState(() => loadReadState());\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchNotifications = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await api.get(\"/api/transactions/history\");\r\n      const activeUserId = decodeTokenPayload()?.id;\r\n      const items = (res.data?.transactions || []).map((tx) =>\r\n        buildNotificationFromTransaction(tx, activeUserId)\r\n      );\r\n      setNotifications(\r\n        items.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n      );\r\n      return items;\r\n    } catch (e) {\r\n      return [];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchNotifications();\r\n  }, [fetchNotifications]);\r\n\r\n  useEffect(() => {\r\n    saveReadState(readMap);\r\n  }, [readMap]);\r\n\r\n  const markAllAsRead = useCallback(() => {\r\n    const next = notifications.reduce((acc, item) => {\r\n      acc[item.id] = true;\r\n      return acc;\r\n    }, {});\r\n    setReadMap(next);\r\n  }, [notifications]);\r\n\r\n  const markAsRead = useCallback((id) => {\r\n    setReadMap((curr) => ({ ...curr, [id]: true }));\r\n  }, []);\r\n\r\n  const refresh = useCallback(async () => {\r\n    const items = await fetchNotifications();\r\n    setNotifications(items);\r\n    return items;\r\n  }, [fetchNotifications]);\r\n\r\n  const value = useMemo(() => {\r\n    const unreadCount = notifications.reduce((count, item) => {\r\n      return readMap[item.id] ? count : count + 1;\r\n    }, 0);\r\n    return {\r\n      notifications,\r\n      unreadCount,\r\n      loading,\r\n      refresh,\r\n      markAllAsRead,\r\n      markAsRead,\r\n      readMap,\r\n    };\r\n  }, [notifications, readMap, refresh, markAllAsRead, markAsRead, loading]);\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NotificationContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}