{"ast":null,"code":"const alphabet = \"ABCDEFGHJKLMNPQRSTUVWXYZ23456789\";\nconst hashSeed = seed => {\n  let hash = 0;\n  for (let i = 0; i < seed.length; i += 1) {\n    hash = hash * 33 ^ seed.charCodeAt(i);\n  }\n  return hash >>> 0;\n};\nconst mixHash = (current, salt) => {\n  return hashSeed(`${current}-${salt}-${current.length}`);\n};\nconst buildEntropySeed = tx => {\n  const created = tx.createdAt ? new Date(tx.createdAt).getTime() : 0;\n  return [tx.id || \"id\", created || Date.now(), tx.amount || 0, tx.type || \"tx\", tx.status || \"st\", tx.description || \"\"].join(\"|\");\n};\nexport const getReferenceCode = tx => {\n  if (!tx) return \"REF-UNKNOWN\";\n  if (tx.referenceCode) return tx.referenceCode;\n  let seed = buildEntropySeed(tx);\n  let hash = hashSeed(seed);\n  let code = \"\";\n  while (code.length < 12) {\n    hash = mixHash(seed, `${hash}-${code.length}`);\n    const index = hash % alphabet.length;\n    code += alphabet[index];\n    seed = `${seed}-${index}-${code.length}`;\n  }\n  const segments = [code.slice(0, 4), code.slice(4, 8), code.slice(8, 12)];\n  const prefix = tx.type === \"deposit\" ? \"IN\" : tx.type === \"transfer\" ? \"OUT\" : \"TX\";\n  return `${prefix}-${segments.join(\"-\")}`;\n};\nexport default getReferenceCode;","map":{"version":3,"names":["alphabet","hashSeed","seed","hash","i","length","charCodeAt","mixHash","current","salt","buildEntropySeed","tx","created","createdAt","Date","getTime","id","now","amount","type","status","description","join","getReferenceCode","referenceCode","code","index","segments","slice","prefix"],"sources":["D:/BMUDHT/frontend/src/utils/reference.js"],"sourcesContent":["const alphabet = \"ABCDEFGHJKLMNPQRSTUVWXYZ23456789\";\r\n\r\nconst hashSeed = (seed) => {\r\n  let hash = 0;\r\n  for (let i = 0; i < seed.length; i += 1) {\r\n    hash = (hash * 33) ^ seed.charCodeAt(i);\r\n  }\r\n  return hash >>> 0;\r\n};\r\n\r\nconst mixHash = (current, salt) => {\r\n  return hashSeed(`${current}-${salt}-${current.length}`);\r\n};\r\n\r\nconst buildEntropySeed = (tx) => {\r\n  const created = tx.createdAt ? new Date(tx.createdAt).getTime() : 0;\r\n  return [\r\n    tx.id || \"id\",\r\n    created || Date.now(),\r\n    tx.amount || 0,\r\n    tx.type || \"tx\",\r\n    tx.status || \"st\",\r\n    tx.description || \"\",\r\n  ].join(\"|\");\r\n};\r\n\r\nexport const getReferenceCode = (tx) => {\r\n  if (!tx) return \"REF-UNKNOWN\";\r\n  if (tx.referenceCode) return tx.referenceCode;\r\n  let seed = buildEntropySeed(tx);\r\n  let hash = hashSeed(seed);\r\n  let code = \"\";\r\n  while (code.length < 12) {\r\n    hash = mixHash(seed, `${hash}-${code.length}`);\r\n    const index = hash % alphabet.length;\r\n    code += alphabet[index];\r\n    seed = `${seed}-${index}-${code.length}`;\r\n  }\r\n  const segments = [code.slice(0, 4), code.slice(4, 8), code.slice(8, 12)];\r\n  const prefix =\r\n    tx.type === \"deposit\" ? \"IN\" : tx.type === \"transfer\" ? \"OUT\" : \"TX\";\r\n  return `${prefix}-${segments.join(\"-\")}`;\r\n};\r\n\r\nexport default getReferenceCode;\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC;AAEnD,MAAMC,QAAQ,GAAIC,IAAI,IAAK;EACzB,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACvCD,IAAI,GAAIA,IAAI,GAAG,EAAE,GAAID,IAAI,CAACI,UAAU,CAACF,CAAC,CAAC;EACzC;EACA,OAAOD,IAAI,KAAK,CAAC;AACnB,CAAC;AAED,MAAMI,OAAO,GAAGA,CAACC,OAAO,EAAEC,IAAI,KAAK;EACjC,OAAOR,QAAQ,CAAC,GAAGO,OAAO,IAAIC,IAAI,IAAID,OAAO,CAACH,MAAM,EAAE,CAAC;AACzD,CAAC;AAED,MAAMK,gBAAgB,GAAIC,EAAE,IAAK;EAC/B,MAAMC,OAAO,GAAGD,EAAE,CAACE,SAAS,GAAG,IAAIC,IAAI,CAACH,EAAE,CAACE,SAAS,CAAC,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC;EACnE,OAAO,CACLJ,EAAE,CAACK,EAAE,IAAI,IAAI,EACbJ,OAAO,IAAIE,IAAI,CAACG,GAAG,CAAC,CAAC,EACrBN,EAAE,CAACO,MAAM,IAAI,CAAC,EACdP,EAAE,CAACQ,IAAI,IAAI,IAAI,EACfR,EAAE,CAACS,MAAM,IAAI,IAAI,EACjBT,EAAE,CAACU,WAAW,IAAI,EAAE,CACrB,CAACC,IAAI,CAAC,GAAG,CAAC;AACb,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIZ,EAAE,IAAK;EACtC,IAAI,CAACA,EAAE,EAAE,OAAO,aAAa;EAC7B,IAAIA,EAAE,CAACa,aAAa,EAAE,OAAOb,EAAE,CAACa,aAAa;EAC7C,IAAItB,IAAI,GAAGQ,gBAAgB,CAACC,EAAE,CAAC;EAC/B,IAAIR,IAAI,GAAGF,QAAQ,CAACC,IAAI,CAAC;EACzB,IAAIuB,IAAI,GAAG,EAAE;EACb,OAAOA,IAAI,CAACpB,MAAM,GAAG,EAAE,EAAE;IACvBF,IAAI,GAAGI,OAAO,CAACL,IAAI,EAAE,GAAGC,IAAI,IAAIsB,IAAI,CAACpB,MAAM,EAAE,CAAC;IAC9C,MAAMqB,KAAK,GAAGvB,IAAI,GAAGH,QAAQ,CAACK,MAAM;IACpCoB,IAAI,IAAIzB,QAAQ,CAAC0B,KAAK,CAAC;IACvBxB,IAAI,GAAG,GAAGA,IAAI,IAAIwB,KAAK,IAAID,IAAI,CAACpB,MAAM,EAAE;EAC1C;EACA,MAAMsB,QAAQ,GAAG,CAACF,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEH,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEH,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACxE,MAAMC,MAAM,GACVlB,EAAE,CAACQ,IAAI,KAAK,SAAS,GAAG,IAAI,GAAGR,EAAE,CAACQ,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,IAAI;EACtE,OAAO,GAAGU,MAAM,IAAIF,QAAQ,CAACL,IAAI,CAAC,GAAG,CAAC,EAAE;AAC1C,CAAC;AAED,eAAeC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}