{"ast":null,"code":"const alphabet = \"ABCDEFGHJKLMNPQRSTUVWXYZ23456789\";\nconst hashSeed = seed => {\n  let hash = 0;\n  for (let i = 0; i < seed.length; i += 1) {\n    hash = hash * 31 + seed.charCodeAt(i) >>> 0;\n  }\n  return hash;\n};\nexport const getReferenceCode = tx => {\n  if (!tx) return \"REF-UNKNOWN\";\n  if (tx.referenceCode) return tx.referenceCode;\n  const baseSeed = `${tx.id || \"id\"}-${tx.createdAt || \"time\"}-${tx.amount || 0}-${tx.type || \"tx\"}-${tx.status || \"st\"}`;\n  let hash = hashSeed(baseSeed);\n  let code = \"\";\n  while (code.length < 8) {\n    const index = hash % alphabet.length;\n    code += alphabet[index];\n    hash = hash / alphabet.length;\n    if (hash < 1) {\n      hash = hashSeed(`${baseSeed}-${code}-${hash}`);\n    }\n  }\n  const prefix = tx.type === \"deposit\" ? \"IN\" : tx.type === \"transfer\" ? \"OUT\" : \"TX\";\n  return `${prefix}-${code.slice(0, 4)}-${code.slice(4, 8)}`;\n};\nexport default getReferenceCode;","map":{"version":3,"names":["alphabet","hashSeed","seed","hash","i","length","charCodeAt","getReferenceCode","tx","referenceCode","baseSeed","id","createdAt","amount","type","status","code","index","prefix","slice"],"sources":["D:/BMUDHT/frontend/src/utils/reference.js"],"sourcesContent":["const alphabet = \"ABCDEFGHJKLMNPQRSTUVWXYZ23456789\";\r\n\r\nconst hashSeed = (seed) => {\r\n  let hash = 0;\r\n  for (let i = 0; i < seed.length; i += 1) {\r\n    hash = (hash * 31 + seed.charCodeAt(i)) >>> 0;\r\n  }\r\n  return hash;\r\n};\r\n\r\nexport const getReferenceCode = (tx) => {\r\n  if (!tx) return \"REF-UNKNOWN\";\r\n  if (tx.referenceCode) return tx.referenceCode;\r\n  const baseSeed = `${tx.id || \"id\"}-${tx.createdAt || \"time\"}-${\r\n    tx.amount || 0\r\n  }-${tx.type || \"tx\"}-${tx.status || \"st\"}`;\r\n  let hash = hashSeed(baseSeed);\r\n  let code = \"\";\r\n  while (code.length < 8) {\r\n    const index = hash % alphabet.length;\r\n    code += alphabet[index];\r\n    hash = hash / alphabet.length;\r\n    if (hash < 1) {\r\n      hash = hashSeed(`${baseSeed}-${code}-${hash}`);\r\n    }\r\n  }\r\n  const prefix =\r\n    tx.type === \"deposit\" ? \"IN\" : tx.type === \"transfer\" ? \"OUT\" : \"TX\";\r\n  return `${prefix}-${code.slice(0, 4)}-${code.slice(4, 8)}`;\r\n};\r\n\r\nexport default getReferenceCode;\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC;AAEnD,MAAMC,QAAQ,GAAIC,IAAI,IAAK;EACzB,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACvCD,IAAI,GAAIA,IAAI,GAAG,EAAE,GAAGD,IAAI,CAACI,UAAU,CAACF,CAAC,CAAC,KAAM,CAAC;EAC/C;EACA,OAAOD,IAAI;AACb,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAIC,EAAE,IAAK;EACtC,IAAI,CAACA,EAAE,EAAE,OAAO,aAAa;EAC7B,IAAIA,EAAE,CAACC,aAAa,EAAE,OAAOD,EAAE,CAACC,aAAa;EAC7C,MAAMC,QAAQ,GAAG,GAAGF,EAAE,CAACG,EAAE,IAAI,IAAI,IAAIH,EAAE,CAACI,SAAS,IAAI,MAAM,IACzDJ,EAAE,CAACK,MAAM,IAAI,CAAC,IACZL,EAAE,CAACM,IAAI,IAAI,IAAI,IAAIN,EAAE,CAACO,MAAM,IAAI,IAAI,EAAE;EAC1C,IAAIZ,IAAI,GAAGF,QAAQ,CAACS,QAAQ,CAAC;EAC7B,IAAIM,IAAI,GAAG,EAAE;EACb,OAAOA,IAAI,CAACX,MAAM,GAAG,CAAC,EAAE;IACtB,MAAMY,KAAK,GAAGd,IAAI,GAAGH,QAAQ,CAACK,MAAM;IACpCW,IAAI,IAAIhB,QAAQ,CAACiB,KAAK,CAAC;IACvBd,IAAI,GAAGA,IAAI,GAAGH,QAAQ,CAACK,MAAM;IAC7B,IAAIF,IAAI,GAAG,CAAC,EAAE;MACZA,IAAI,GAAGF,QAAQ,CAAC,GAAGS,QAAQ,IAAIM,IAAI,IAAIb,IAAI,EAAE,CAAC;IAChD;EACF;EACA,MAAMe,MAAM,GACVV,EAAE,CAACM,IAAI,KAAK,SAAS,GAAG,IAAI,GAAGN,EAAE,CAACM,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,IAAI;EACtE,OAAO,GAAGI,MAAM,IAAIF,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIH,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;AAC5D,CAAC;AAED,eAAeZ,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}