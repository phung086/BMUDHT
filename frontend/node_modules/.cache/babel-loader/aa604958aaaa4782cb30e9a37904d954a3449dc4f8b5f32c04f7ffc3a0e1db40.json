{"ast":null,"code":"import axios from \"axios\";\n\n// Create axios instance that points to the backend proxy (CRA will proxy /api to backend)\nconst api = axios.create({\n  baseURL: \"/\",\n  withCredentials: true\n});\n\n// Attach Authorization token from localStorage if present\napi.interceptors.request.use(async config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // For mutating requests, ensure we have X-CSRF-Token set. We store token on first fetch.\n  const method = (config.method || \"get\").toLowerCase();\n  if ([\"post\", \"put\", \"patch\", \"delete\"].includes(method)) {\n    if (!api.defaults.headers[\"X-CSRF-Token\"]) {\n      try {\n        const res = await axios.get(\"/api/csrf-token\");\n        api.defaults.headers[\"X-CSRF-Token\"] = res.data.csrfToken;\n      } catch (e) {\n        // ignore — server may be configured to not require CSRF in dev\n      }\n    }\n    config.headers = config.headers || {};\n    if (api.defaults.headers[\"X-CSRF-Token\"] && !config.headers[\"X-CSRF-Token\"]) {\n      config.headers[\"X-CSRF-Token\"] = api.defaults.headers[\"X-CSRF-Token\"];\n    }\n  }\n  return config;\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","method","toLowerCase","includes","defaults","res","get","data","csrfToken","e"],"sources":["D:/BMUDHT/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Create axios instance that points to the backend proxy (CRA will proxy /api to backend)\r\nconst api = axios.create({\r\n  baseURL: \"/\",\r\n  withCredentials: true,\r\n});\r\n\r\n// Attach Authorization token from localStorage if present\r\napi.interceptors.request.use(async (config) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    config.headers = config.headers || {};\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n\r\n  // For mutating requests, ensure we have X-CSRF-Token set. We store token on first fetch.\r\n  const method = (config.method || \"get\").toLowerCase();\r\n  if ([\"post\", \"put\", \"patch\", \"delete\"].includes(method)) {\r\n    if (!api.defaults.headers[\"X-CSRF-Token\"]) {\r\n      try {\r\n        const res = await axios.get(\"/api/csrf-token\");\r\n        api.defaults.headers[\"X-CSRF-Token\"] = res.data.csrfToken;\r\n      } catch (e) {\r\n        // ignore — server may be configured to not require CSRF in dev\r\n      }\r\n    }\r\n    config.headers = config.headers || {};\r\n    if (\r\n      api.defaults.headers[\"X-CSRF-Token\"] &&\r\n      !config.headers[\"X-CSRF-Token\"]\r\n    ) {\r\n      config.headers[\"X-CSRF-Token\"] = api.defaults.headers[\"X-CSRF-Token\"];\r\n    }\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,GAAG;EACZC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EAC7C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,GAAGJ,MAAM,CAACI,OAAO,IAAI,CAAC,CAAC;IACrCJ,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;;EAEA;EACA,MAAMK,MAAM,GAAG,CAACN,MAAM,CAACM,MAAM,IAAI,KAAK,EAAEC,WAAW,CAAC,CAAC;EACrD,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACF,MAAM,CAAC,EAAE;IACvD,IAAI,CAACb,GAAG,CAACgB,QAAQ,CAACL,OAAO,CAAC,cAAc,CAAC,EAAE;MACzC,IAAI;QACF,MAAMM,GAAG,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,iBAAiB,CAAC;QAC9ClB,GAAG,CAACgB,QAAQ,CAACL,OAAO,CAAC,cAAc,CAAC,GAAGM,GAAG,CAACE,IAAI,CAACC,SAAS;MAC3D,CAAC,CAAC,OAAOC,CAAC,EAAE;QACV;MAAA;IAEJ;IACAd,MAAM,CAACI,OAAO,GAAGJ,MAAM,CAACI,OAAO,IAAI,CAAC,CAAC;IACrC,IACEX,GAAG,CAACgB,QAAQ,CAACL,OAAO,CAAC,cAAc,CAAC,IACpC,CAACJ,MAAM,CAACI,OAAO,CAAC,cAAc,CAAC,EAC/B;MACAJ,MAAM,CAACI,OAAO,CAAC,cAAc,CAAC,GAAGX,GAAG,CAACgB,QAAQ,CAACL,OAAO,CAAC,cAAc,CAAC;IACvE;EACF;EAEA,OAAOJ,MAAM;AACf,CAAC,CAAC;AAEF,eAAeP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}