{"ast":null,"code":"import axios from\"axios\";// Create axios instance that points to the backend proxy (CRA will proxy /api to backend)\nconst api=axios.create({baseURL:\"/\",withCredentials:true});// Attach Authorization token from localStorage if present\napi.interceptors.request.use(async config=>{const token=localStorage.getItem(\"token\");if(token){config.headers=config.headers||{};config.headers.Authorization=\"Bearer \".concat(token);}// For mutating requests, ensure we have X-CSRF-Token set. We store token on first fetch.\nconst method=(config.method||\"get\").toLowerCase();if([\"post\",\"put\",\"patch\",\"delete\"].includes(method)){if(!api.defaults.headers[\"X-CSRF-Token\"]){try{const res=await axios.get(\"/api/csrf-token\");api.defaults.headers[\"X-CSRF-Token\"]=res.data.csrfToken;}catch(e){// ignore — server may be configured to not require CSRF in dev\n}}config.headers=config.headers||{};if(api.defaults.headers[\"X-CSRF-Token\"]&&!config.headers[\"X-CSRF-Token\"]){config.headers[\"X-CSRF-Token\"]=api.defaults.headers[\"X-CSRF-Token\"];}}return config;});export default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","concat","method","toLowerCase","includes","defaults","res","get","data","csrfToken","e"],"sources":["D:/BMUDHT/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Create axios instance that points to the backend proxy (CRA will proxy /api to backend)\r\nconst api = axios.create({\r\n  baseURL: \"/\",\r\n  withCredentials: true,\r\n});\r\n\r\n// Attach Authorization token from localStorage if present\r\napi.interceptors.request.use(async (config) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    config.headers = config.headers || {};\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n\r\n  // For mutating requests, ensure we have X-CSRF-Token set. We store token on first fetch.\r\n  const method = (config.method || \"get\").toLowerCase();\r\n  if ([\"post\", \"put\", \"patch\", \"delete\"].includes(method)) {\r\n    if (!api.defaults.headers[\"X-CSRF-Token\"]) {\r\n      try {\r\n        const res = await axios.get(\"/api/csrf-token\");\r\n        api.defaults.headers[\"X-CSRF-Token\"] = res.data.csrfToken;\r\n      } catch (e) {\r\n        // ignore — server may be configured to not require CSRF in dev\r\n      }\r\n    }\r\n    config.headers = config.headers || {};\r\n    if (\r\n      api.defaults.headers[\"X-CSRF-Token\"] &&\r\n      !config.headers[\"X-CSRF-Token\"]\r\n    ) {\r\n      config.headers[\"X-CSRF-Token\"] = api.defaults.headers[\"X-CSRF-Token\"];\r\n    }\r\n  }\r\n\r\n  return config;\r\n});\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACvBC,OAAO,CAAE,GAAG,CACZC,eAAe,CAAE,IACnB,CAAC,CAAC,CAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,KAAO,CAAAC,MAAM,EAAK,CAC7C,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAC3C,GAAIF,KAAK,CAAE,CACTD,MAAM,CAACI,OAAO,CAAGJ,MAAM,CAACI,OAAO,EAAI,CAAC,CAAC,CACrCJ,MAAM,CAACI,OAAO,CAACC,aAAa,WAAAC,MAAA,CAAaL,KAAK,CAAE,CAClD,CAEA;AACA,KAAM,CAAAM,MAAM,CAAG,CAACP,MAAM,CAACO,MAAM,EAAI,KAAK,EAAEC,WAAW,CAAC,CAAC,CACrD,GAAI,CAAC,MAAM,CAAE,KAAK,CAAE,OAAO,CAAE,QAAQ,CAAC,CAACC,QAAQ,CAACF,MAAM,CAAC,CAAE,CACvD,GAAI,CAACd,GAAG,CAACiB,QAAQ,CAACN,OAAO,CAAC,cAAc,CAAC,CAAE,CACzC,GAAI,CACF,KAAM,CAAAO,GAAG,CAAG,KAAM,CAAAnB,KAAK,CAACoB,GAAG,CAAC,iBAAiB,CAAC,CAC9CnB,GAAG,CAACiB,QAAQ,CAACN,OAAO,CAAC,cAAc,CAAC,CAAGO,GAAG,CAACE,IAAI,CAACC,SAAS,CAC3D,CAAE,MAAOC,CAAC,CAAE,CACV;AAAA,CAEJ,CACAf,MAAM,CAACI,OAAO,CAAGJ,MAAM,CAACI,OAAO,EAAI,CAAC,CAAC,CACrC,GACEX,GAAG,CAACiB,QAAQ,CAACN,OAAO,CAAC,cAAc,CAAC,EACpC,CAACJ,MAAM,CAACI,OAAO,CAAC,cAAc,CAAC,CAC/B,CACAJ,MAAM,CAACI,OAAO,CAAC,cAAc,CAAC,CAAGX,GAAG,CAACiB,QAAQ,CAACN,OAAO,CAAC,cAAc,CAAC,CACvE,CACF,CAEA,MAAO,CAAAJ,MAAM,CACf,CAAC,CAAC,CAEF,cAAe,CAAAP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}