{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { broadcastAuthChange, clearToken, hasIdleTimedOut, isTokenExpired, markSessionActive, readToken, shouldProactivelyRefresh } from \"../utils/authSignal\";\nimport { ensureFreshAccessToken, serverLogout, setSessionExpiredFlag } from \"../utils/sessionManager\";\nconst CHECK_INTERVAL_MS = 30 * 1000;\nconst ACTIVITY_EVENTS = [\"mousemove\", \"keydown\", \"click\", \"touchstart\", \"scroll\"];\nconst SessionWatcher = () => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  useEffect(() => {\n    if (typeof window === \"undefined\") return undefined;\n    let destroyed = false;\n    const handleActivity = () => {\n      markSessionActive();\n    };\n    ACTIVITY_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, handleActivity, {\n        passive: true\n      });\n    });\n    const runChecks = async () => {\n      const token = readToken();\n      if (!token) {\n        return;\n      }\n      if (hasIdleTimedOut() || isTokenExpired()) {\n        try {\n          await serverLogout();\n        } catch (error) {\n          // ignore logout errors\n        } finally {\n          setSessionExpiredFlag();\n          clearToken();\n          broadcastAuthChange();\n          if (!destroyed && location.pathname !== \"/login\") {\n            navigate(\"/login\", {\n              replace: true\n            });\n          }\n        }\n        return;\n      }\n      if (shouldProactivelyRefresh()) {\n        try {\n          await ensureFreshAccessToken();\n        } catch (error) {\n          setSessionExpiredFlag();\n          clearToken();\n          broadcastAuthChange();\n          if (!destroyed && location.pathname !== \"/login\") {\n            navigate(\"/login\", {\n              replace: true\n            });\n          }\n        }\n      }\n    };\n    const intervalId = window.setInterval(() => {\n      runChecks().catch(() => {\n        /* swallow errors */\n      });\n    }, CHECK_INTERVAL_MS);\n\n    // run an immediate check after mount\n    runChecks().catch(() => {\n      /* swallow errors */\n    });\n    return () => {\n      destroyed = true;\n      ACTIVITY_EVENTS.forEach(eventName => {\n        window.removeEventListener(eventName, handleActivity);\n      });\n      window.clearInterval(intervalId);\n    };\n  }, [location.pathname, navigate]);\n  return null;\n};\n_s(SessionWatcher, \"gMsdikdDs1f1NUVrv3Ag60oK04k=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = SessionWatcher;\nexport default SessionWatcher;\nvar _c;\n$RefreshReg$(_c, \"SessionWatcher\");","map":{"version":3,"names":["useEffect","useLocation","useNavigate","broadcastAuthChange","clearToken","hasIdleTimedOut","isTokenExpired","markSessionActive","readToken","shouldProactivelyRefresh","ensureFreshAccessToken","serverLogout","setSessionExpiredFlag","CHECK_INTERVAL_MS","ACTIVITY_EVENTS","SessionWatcher","_s","navigate","location","window","undefined","destroyed","handleActivity","forEach","eventName","addEventListener","passive","runChecks","token","error","pathname","replace","intervalId","setInterval","catch","removeEventListener","clearInterval","_c","$RefreshReg$"],"sources":["D:/BMUDHT/frontend/src/components/SessionWatcher.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  broadcastAuthChange,\r\n  clearToken,\r\n  hasIdleTimedOut,\r\n  isTokenExpired,\r\n  markSessionActive,\r\n  readToken,\r\n  shouldProactivelyRefresh,\r\n} from \"../utils/authSignal\";\r\nimport {\r\n  ensureFreshAccessToken,\r\n  serverLogout,\r\n  setSessionExpiredFlag,\r\n} from \"../utils/sessionManager\";\r\n\r\nconst CHECK_INTERVAL_MS = 30 * 1000;\r\nconst ACTIVITY_EVENTS = [\r\n  \"mousemove\",\r\n  \"keydown\",\r\n  \"click\",\r\n  \"touchstart\",\r\n  \"scroll\",\r\n];\r\n\r\nconst SessionWatcher = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (typeof window === \"undefined\") return undefined;\r\n\r\n    let destroyed = false;\r\n\r\n    const handleActivity = () => {\r\n      markSessionActive();\r\n    };\r\n\r\n    ACTIVITY_EVENTS.forEach((eventName) => {\r\n      window.addEventListener(eventName, handleActivity, { passive: true });\r\n    });\r\n\r\n    const runChecks = async () => {\r\n      const token = readToken();\r\n      if (!token) {\r\n        return;\r\n      }\r\n\r\n      if (hasIdleTimedOut() || isTokenExpired()) {\r\n        try {\r\n          await serverLogout();\r\n        } catch (error) {\r\n          // ignore logout errors\r\n        } finally {\r\n          setSessionExpiredFlag();\r\n          clearToken();\r\n          broadcastAuthChange();\r\n          if (!destroyed && location.pathname !== \"/login\") {\r\n            navigate(\"/login\", { replace: true });\r\n          }\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (shouldProactivelyRefresh()) {\r\n        try {\r\n          await ensureFreshAccessToken();\r\n        } catch (error) {\r\n          setSessionExpiredFlag();\r\n          clearToken();\r\n          broadcastAuthChange();\r\n          if (!destroyed && location.pathname !== \"/login\") {\r\n            navigate(\"/login\", { replace: true });\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    const intervalId = window.setInterval(() => {\r\n      runChecks().catch(() => {\r\n        /* swallow errors */\r\n      });\r\n    }, CHECK_INTERVAL_MS);\r\n\r\n    // run an immediate check after mount\r\n    runChecks().catch(() => {\r\n      /* swallow errors */\r\n    });\r\n\r\n    return () => {\r\n      destroyed = true;\r\n      ACTIVITY_EVENTS.forEach((eventName) => {\r\n        window.removeEventListener(eventName, handleActivity);\r\n      });\r\n      window.clearInterval(intervalId);\r\n    };\r\n  }, [location.pathname, navigate]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default SessionWatcher;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}